import json
from datasets import DATASET
import numpy as np

def main(alpha):
    file_ = 'ranking_' + str(alpha) + '.json'
    with open(DATASET.root / file_, 'rb') as file:
        ranking = json.load(file)
    with open(DATASET.root / 'name_src_label_1.json', 'rb') as file:
        label = json.load(file)
    out = []
    count = 0 
    top5 = 0
    top10 = 0
    top20 = 0
    MRR = 0
    for i, bug in enumerate(label):
        x = []
        min = 10000000
        for source in bug:
            if(ranking[i].index(source) < 1):
                count = count + 1
            if min > ranking[i].index(source):
                min = ranking[i].index(source)
            x.append(ranking[i].index(source))
        if(min < 5):
            top5 = top5 + 1
        if(min < 10):
            top10 = top10 + 1
        if(min < 20):
            top20 = top20 + 1
        MRR = MRR + 1 / (min + 1)
        out.append(x)
    MRR = MRR / len(label)
    print(alpha, 'normal')
    print(count) 
    # 63/587 AspectJ
    # 155 Swt
    print(top5) 
    # 158/587 AspectJ
    # 514 Swt
    print(top10) 
    # 208/587 AspectJ
    # 821 Swt
    print(top20) 
    # 278/587 AspectJ
    # 1256 Swt
    print(MRR) 
    # 0.19069145864854212 AspectJ
    # 0.0936760318790166 Swt
    file_name = 'ranking_label_' + str(alpha) + '.json'
    with open(DATASET.root / file_name, 'w') as file:
        json.dump(out, file)

def main_normal(alpha):
    file_ = 'ranking_normal_' + str(alpha) + '.json'
    with open(DATASET.root / file_, 'rb') as file:
        ranking = json.load(file)
    with open(DATASET.root / 'name_src_label_1.json', 'rb') as file:
        label = json.load(file)
    out = []
    count = 0 
    top5 = 0
    top10 = 0
    top20 = 0
    MRR = 0
    t = {}
    for i, bug in enumerate(label):
        x = []
        min = 10000000
        for source in bug:
            if(ranking[i].index(source) < 1):
                count = count + 1
            if min > ranking[i].index(source):
                min = ranking[i].index(source)
            x.append(ranking[i].index(source))
        if(min < 5):
            top5 = top5 + 1
        if(min < 10):
            top10 = top10 + 1
        if(min < 20):
            top20 = top20 + 1
        # if(min > 50):
        #     print(i, min, bug)
        #     for z in bug:
        #         if z in t:
        #             t[z] = t[z] + 1
        #         else:
        #             t[z] = 0
        MRR = MRR + 1 / (min + 1)
        out.append(x)
    # print(t)
    # for i in t:
    #     if t[i] == 5:
    #         print(i)
    # print(max(t))
    MRR = MRR / len(label)
    print(alpha)
    print(count) 
    # 71/587 AspectJ top1
    # 111/1044 Tomcat
    print(top5) 
    print(top10) 
    print(top20) 
    print(MRR) 
    file_name = 'ranking_label_normal_' + str(alpha) + '.json'
    with open(DATASET.root / file_name, 'w') as file:
        json.dump(out, file)
def load():
    main(0)
    main_normal(0)
    main(0.1)
    main_normal(0.1)
    main(0.2)
    main_normal(0.2)
    main(0.3)
    main_normal(0.3)
    main(0.4)
    main_normal(0.4)
    main(0.5)
    main_normal(0.5)
    main(0.6)
    main_normal(0.6)
    main(0.7)
    main_normal(0.7)
    main(0.8)
    main_normal(0.8)
    main(0.9)
    main_normal(0.9)
    main(1)
    main_normal(1)

if __name__ == '__main__':
    main(0)
    main_normal(0)
    main(0.1)
    main_normal(0.1)
    main(0.2)
    main_normal(0.2)
    main(0.3)
    main_normal(0.3)
    main(0.4)
    main_normal(0.4)
    main(0.5)
    main_normal(0.5)
    main(0.6)
    main_normal(0.6)
    main(0.7)
    main_normal(0.7)
    main(0.8)
    main_normal(0.8)
    main(0.9)
    main_normal(0.9)
    main(1)
    main_normal(1)


"""
No test (386) 
0 normal
30
79
119
149
0.15142613472654692
0
29
73
111
153
0.14792414522370867
0.1 normal
32
88
122
154
0.16149457313248194
0.1
29
78
122
157
0.15342702448613277
0.2 normal
35
91
122
158
0.17153625774960962
0.2
34
87
124
160
0.1673696205339595
0.3 normal
42
97
127
163
0.18481012262824237
0.3
40
94
130
164
0.18270812382655863
0.4 normal
38
98
130
170
0.183890279558488
0.4
42
92
132
170
0.18751989904637514
0.5 normal
43
100
132
171
0.19254037890880715
0.5
44
100
134
177
0.19467888051193713
0.6 normal
46
102
133
175
0.1972362204342461
0.6
45
102
136
180
0.19930037308665002
0.7 normal
47
104
138
176
0.1992161220853992
0.7
51
108
140
176
0.20852464374323534
0.8 normal
46
103
137
174
0.19574868097526368
0.8
47
104
139
176
0.20340246357916386
0.9 normal
46
103
136
175
0.19826340396953154
0.9
47
104
136
174
0.20024164161941171
1 normal
46
108
135
169
0.19737041774546965
1
46
108
135
169
0.19737041774546965
"""

"""
No test (386): pos 'NN'
0 normal
31
84
109
142
0.15408073558441363
0
28
82
112
143
0.14862717925176272
0.1 normal
35
84
113
149
0.1639406232365597
0.1
31
83
115
147
0.15717062938553372
0.2 normal
42
84
119
153
0.17707812226654712
0.2
35
86
119
154
0.16756984502701386
0.3 normal
43
88
120
154
0.18053915755944497
0.3
37
91
119
159
0.17413737161486528
0.4 normal
43
89
125
161
0.18343611538017723
0.4
37
95
125
162
0.17702272304441954
0.5 normal
43
92
125
158
0.18441682066612805
0.5
42
96
131
161
0.18582676179801114
0.6 normal
43
90
125
158
0.18249718235494317
0.6
46
97
126
162
0.19231367304156063
0.7 normal
44
90
128
160
0.18375360461268922
0.7
44
95
126
158
0.18776863139516162
0.8 normal
42
90
124
156
0.18053867110854258
0.8
44
93
126
157
0.18550356258722753
0.9 normal
42
88
124
153
0.17996973494525176
0.9
42
91
123
155
0.18242862247696276
1 normal
43
91
119
153
0.1797811116270042
1
43
91
119
153
0.1797811116270042
"""

"""
No test: only sum 'NN' (386)
0 normal
24
66
85
123
0.1224664471215593
0
29
66
90
130
0.1338228434498415
0.1 normal
26
67
91
128
0.12886575164036446
0.1
28
68
90
133
0.13450592276701606
0.2 normal
27
67
89
131
0.1313838156522269
0.2
31
65
88
132
0.13932205798331185
0.3 normal
31
63
89
131
0.13552008687186576
0.3
29
66
90
135
0.13590667386895078
0.4 normal
26
68
87
126
0.12851648745006167
0.4
28
67
90
133
0.1340968943522453
0.5 normal
28
66
85
119
0.1313261994820742
0.5
25
64
89
127
0.12879503362253583
0.6 normal
28
61
85
119
0.1298896538488431
0.6
29
61
88
122
0.13369249661012764
0.7 normal
29
59
82
115
0.12882335122674238
0.7
32
63
87
117
0.13645520897058286
0.8 normal
29
59
80
112
0.12597887620937603
0.8
29
60
83
116
0.1285639008509428
0.9 normal
31
57
79
111
0.12777761498923165
0.9
30
60
79
111
0.12742743375557644
1 normal
30
55
74
108
0.12520189603974827
1
30
55
74
108
0.12520189603974827
"""

"""
No test: only desc 'NN'
0 normal
25
70
90
121
0.13015185593004688
0
26
66
96
123
0.1303569461655054
0.1 normal
27
74
93
128
0.13561653869652374
0.1
27
68
97
129
0.13505901203752446
0.2 normal
30
75
99
131
0.1436847128043117
0.2
30
72
99
132
0.14258965393448325
0.3 normal
33
75
100
132
0.15046717976993546
0.3
31
78
101
135
0.14742811261604352
0.4 normal
34
74
106
137
0.15314042717921314
0.4
32
80
104
139
0.15279933957417086
0.5 normal
36
78
105
136
0.1570567348318003
0.5
35
82
105
138
0.15750015484261373
0.6 normal
38
76
107
133
0.1580641666443788
0.6
39
80
104
137
0.16444848904220796
0.7 normal
37
78
107
136
0.15674274618330453
0.7
37
82
104
137
0.16003719802986327
0.8 normal
36
77
107
137
0.15402496818389091
0.8
39
80
107
136
0.1606764921600015
0.9 normal
37
75
106
135
0.155568417921716
0.9
37
77
106
134
0.15739235734996831
1 normal
40
79
101
133
0.15976053891406838
1
40
79
101
133
0.15976053891406838
"""

"""
Period Study: 425
0 normal
73
134
173
212
0.2479621702169664
0
73
134
173
212
0.2479621702169664
0.1 normal
74
135
172
215
0.25003049273085415
0.1
75
136
172
214
0.2540669989132951
0.2 normal
72
133
173
216
0.2481041023852403
0.2
73
138
173
223
0.25512107794394806
0.3 normal
72
137
171
217
0.2505882180981852
0.3
74
146
174
217
0.25749000621383344
0.4 normal
67
135
168
209
0.2439898677554417
0.4
73
144
174
219
0.25787615898259214
0.5 normal
60
134
167
212
0.2349985576179707
0.5
73
141
173
216
0.2557702524474008
0.6 normal
60
134
167
211
0.23270543128094232
0.6
72
138
179
215
0.25210936608119955
0.7 normal
61
131
168
208
0.2305218960267597
0.7
65
128
174
212
0.23880516820226722
0.8 normal
50
127
168
214
0.21178887025606233
0.8
61
122
174
212
0.22692415649819153
0.9 normal
48
121
164
217
0.2031756187483317
0.9
58
114
165
207
0.21432848493268222
1 normal
43
110
157
208
0.18884041502375182
1
54
114
152
196
0.20619665898876724
"""

"""
No tests 381
0 normal
46
108
141
179
0.20569055915640527
0
46
108
141
179
0.20569055915640527
0.1 normal
46
107
141
183
0.20433331790355264
0.1
47
107
142
183
0.20738406574326582
0.2 normal
45
105
142
181
0.20156668398633631
0.2
48
106
143
184
0.21021880913366475
0.3 normal
46
104
140
182
0.2049468764138152
0.3
48
113
141
187
0.21154546861747256
0.4 normal
44
103
137
180
0.2016581286768761
0.4
44
111
140
188
0.20314510821966908
0.5 normal
42
101
134
175
0.19782924454523115
0.5
43
102
136
185
0.19930205915106766
0.6 normal
42
100
132
178
0.19499604713240776
0.6
41
97
136
182
0.1899233026622994
0.7 normal
44
101
129
169
0.19265978958856048
0.7
41
97
127
172
0.18541530304402196
0.8 normal
37
94
125
162
0.1802529515216126
0.8
35
92
127
168
0.17185726922511813
0.9 normal
33
90
121
157
0.16738858479620367
0.9
29
84
124
164
0.15789448889927762
1 normal
32
79
118
154
0.1598149112791601
1
31
76
113
161
0.1526849006459335
"""

"""
223 bug
0 normal
50
91
112
137
0.31729823910350125
0
50
91
112
137
0.31729823910350125
0.1 normal
51
88
112
140
0.31989944429294204
0.1
54
91
111
139
0.3301702420993663
0.2 normal
50
91
115
138
0.321739861180306
0.2
50
92
115
140
0.32559743471995267
0.3 normal
48
91
115
136
0.319580722281722
0.3
49
93
115
138
0.32501144177267793
0.4 normal
46
92
111
139
0.31309133928746613
0.4
49
91
111
136
0.3244942003527871
0.5 normal
44
92
109
141
0.30619160086199837
0.5
49
95
113
136
0.32357994561667464
0.6 normal
46
92
111
133
0.3098791481520001
0.6
50
94
111
136
0.3190711556769141
0.7 normal
47
91
109
129
0.3082820352060988
0.7
48
92
110
135
0.3104939220109215
0.8 normal
41
87
110
126
0.2898043075341775
0.8
46
89
109
134
0.2968837323296547
0.9 normal
36
86
106
127
0.2696781283383155
0.9
47
83
108
130
0.2954461109311165
1 normal
32
79
103
124
0.25050244227029383
1
41
81
102
128
"""